package CRUD_Veterinaria;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author maynorlinux
 */
public class Historial_Consulta_Vista extends javax.swing.JFrame {

    Metodos me = new Metodos();
    conexion con = new conexion();

    /**
     * Creates new form Historial_Consulta_Vista
     */
    public Historial_Consulta_Vista() {
        initComponents();
        mostrarFecha();
        mostrardatos();
        configurarSegunRol(Sesion.rolActual);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        txt_nombre_cliente = new javax.swing.JTextField();
        btn_registrar = new javax.swing.JButton();
        btn_actualizar = new javax.swing.JButton();
        btn_eliminar = new javax.swing.JButton();
        btnbuscar_cliente = new javax.swing.JButton();
        txt_ident_cliente = new javax.swing.JTextField();
        txt_nom_empleado = new javax.swing.JTextField();
        txt_ident_empleado = new javax.swing.JTextField();
        btnbuscar_empleado = new javax.swing.JButton();
        txt_diagnostico = new javax.swing.JTextField();
        txt_precio = new javax.swing.JTextField();
        txt_id_consulta = new javax.swing.JTextField();
        combo_mascota = new javax.swing.JComboBox<>();
        txt_fecha = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtable_datos = new javax.swing.JTable();
        txt_buscar = new javax.swing.JTextField();
        btn_buscar = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(106, 56, 56));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Registro e Historial de Consultas", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18), new java.awt.Color(255, 248, 240))); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(1246, 597));

        jPanel2.setBackground(new java.awt.Color(255, 248, 240));

        txt_nombre_cliente.setEditable(false);
        txt_nombre_cliente.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        txt_nombre_cliente.setMinimumSize(new java.awt.Dimension(65, 65));
        txt_nombre_cliente.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_nombre_clienteFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_nombre_clienteFocusLost(evt);
            }
        });
        txt_nombre_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_nombre_clienteActionPerformed(evt);
            }
        });

        btn_registrar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_registrar.setText("Registrar");
        btn_registrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_registrarActionPerformed(evt);
            }
        });

        btn_actualizar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_actualizar.setText("Actualizar");
        btn_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_actualizarActionPerformed(evt);
            }
        });

        btn_eliminar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_eliminar.setText("Eliminar");
        btn_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminarActionPerformed(evt);
            }
        });

        btnbuscar_cliente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnbuscar_cliente.setText("Buscar");
        btnbuscar_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbuscar_clienteActionPerformed(evt);
            }
        });

        txt_ident_cliente.setBorder(javax.swing.BorderFactory.createTitledBorder("Identidad del Cliente"));

        txt_nom_empleado.setEditable(false);
        txt_nom_empleado.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        txt_nom_empleado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_nom_empleadoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_nom_empleadoFocusLost(evt);
            }
        });
        txt_nom_empleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_nom_empleadoActionPerformed(evt);
            }
        });

        txt_ident_empleado.setBorder(javax.swing.BorderFactory.createTitledBorder("Identidad del Empleado"));

        btnbuscar_empleado.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnbuscar_empleado.setText("Buscar");
        btnbuscar_empleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbuscar_empleadoActionPerformed(evt);
            }
        });

        txt_diagnostico.setBorder(javax.swing.BorderFactory.createTitledBorder("Diagnostico"));

        txt_precio.setBorder(javax.swing.BorderFactory.createTitledBorder("Precio"));

        txt_id_consulta.setEditable(false);
        txt_id_consulta.setBorder(javax.swing.BorderFactory.createTitledBorder("Id Consulta"));
        txt_id_consulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_id_consultaActionPerformed(evt);
            }
        });

        combo_mascota.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar Mascota" }));

        txt_fecha.setEditable(false);
        txt_fecha.setBorder(javax.swing.BorderFactory.createTitledBorder("Fecha"));
        txt_fecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_fechaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btn_registrar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addComponent(btn_actualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txt_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_precio, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txt_nombre_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(combo_mascota, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txt_diagnostico, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txt_nom_empleado, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_id_consulta, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txt_ident_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnbuscar_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txt_ident_empleado, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnbuscar_empleado, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_ident_cliente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnbuscar_cliente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_nombre_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_mascota, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_ident_empleado, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnbuscar_empleado, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_nom_empleado, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_id_consulta))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_precio, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_diagnostico, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_registrar, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_actualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btn_eliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(255, 248, 240));

        jtable_datos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id del cargo", "Cargo", "Sueldo", "Empleado"
            }
        ));
        jtable_datos.setToolTipText("");
        jtable_datos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtable_datosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtable_datos);

        txt_buscar.setBorder(javax.swing.BorderFactory.createTitledBorder("Ingresa nombre de la Mascota o Id Consulta"));
        txt_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_buscarActionPerformed(evt);
            }
        });

        btn_buscar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_buscar.setText("Buscar");
        btn_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 677, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(txt_buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txt_buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_nombre_clienteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_nombre_clienteFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nombre_clienteFocusGained

    private void txt_nombre_clienteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_nombre_clienteFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nombre_clienteFocusLost

    private void txt_nombre_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_nombre_clienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nombre_clienteActionPerformed

    private void btn_registrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_registrarActionPerformed
        // TODO add your handling code here:                                            
        // Obtener fecha (de JTextField)
        String fechaStr = txt_fecha.getText().trim();

        // Validación de campos vacíos
        if (txt_nombre_cliente.getText().trim().isEmpty()
                || txt_diagnostico.getText().trim().isEmpty()
                || txt_precio.getText().trim().isEmpty()
                || fechaStr.isEmpty()
                || combo_mascota.getSelectedItem() == null
                || combo_mascota.getSelectedItem().toString().equals("Seleccionar Mascota")
                || txt_nom_empleado.getText().trim().isEmpty())
        {

            JOptionPane.showMessageDialog(null, "Por favor, completa todos los campos requeridos.");
            return;
        }

        // Validar que el precio es numérico
        try {
            Double.parseDouble(txt_precio.getText().trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "El precio debe ser numérico.");
            return;
        }
        // Convertir fecha a java.sql.Date
        java.sql.Date fechaSQL = java.sql.Date.valueOf(fechaStr);

        try ( Connection cn = con.Conectar()) {
            // Obtener el id_mascota y el id_empleado por nombre
            int id_mascota = -1;
            try ( PreparedStatement ps = cn.prepareStatement("SELECT id_mascota FROM mascota WHERE nombre = ?")) {
                ps.setString(1, combo_mascota.getSelectedItem().toString());
                ResultSet rs = ps.executeQuery();
                if (rs.next()) {
                    id_mascota = rs.getInt("id_mascota");
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró la mascota seleccionada.");
                    return;
                }
            }

            int id_empleado = -1;
            try ( PreparedStatement ps2 = cn.prepareStatement("SELECT id_empleado FROM empleado WHERE nombre = ?")) {
                ps2.setString(1, txt_nom_empleado.getText().trim());
                ResultSet rs2 = ps2.executeQuery();
                if (rs2.next()) {
                    id_empleado = rs2.getInt("id_empleado");
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró el empleado seleccionado.");
                    return;
                }
            }

            // Insertar en la base de datos SIN variables intermedias
            String query = "INSERT INTO historial_consulta (fecha_historial_consulta, diagnostico, precio_consulta, id_mascota, id_empleado) VALUES (?, ?, ?, ?, ?)";
            try ( PreparedStatement ps = cn.prepareStatement(query)) {
                ps.setDate(1, fechaSQL);
                ps.setString(2, txt_diagnostico.getText().trim());
                ps.setDouble(3, Double.parseDouble(txt_precio.getText().trim()));
                ps.setInt(4, id_mascota);
                ps.setInt(5, id_empleado);
                ps.executeUpdate();

                JOptionPane.showMessageDialog(this, "Consulta registrada correctamente.");
                me.limpiarCampos(txt_precio, txt_diagnostico, txt_ident_empleado, txt_nom_empleado, txt_ident_cliente, txt_nombre_cliente);
                combo_mascota.setSelectedIndex(0);
               
                mostrardatos();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al registrar consulta: " + e.getMessage());
        }

    }//GEN-LAST:event_btn_registrarActionPerformed

    private void btn_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_actualizarActionPerformed
        // TODO add your handling code here:

        String idConsultaStr = txt_id_consulta.getText().trim();
        if (idConsultaStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay consulta seleccionada para actualizar.");
            return;
        }

        String fechaStr = txt_fecha.getText().trim();

        if (txt_nombre_cliente.getText().trim().isEmpty()
                || txt_diagnostico.getText().trim().isEmpty()
                || txt_precio.getText().trim().isEmpty()
                || fechaStr.isEmpty()
                || combo_mascota.getSelectedItem() == null
                || combo_mascota.getSelectedItem().toString().equals("Seleccionar Mascota")
                || txt_nom_empleado.getText().trim().isEmpty()) {

            JOptionPane.showMessageDialog(this, "Por favor, completa todos los campos requeridos.");
            return;
        }

        // Validar que el precio es numérico
        try {
            Double.parseDouble(txt_precio.getText().trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El precio debe ser numérico.");
            return;
        }

        java.sql.Date fechaSQL = java.sql.Date.valueOf(fechaStr);

        try ( Connection cn = con.Conectar();) {
            // Obtener el id_mascota y el id_empleado por nombre
            int id_mascota = -1;
            try ( PreparedStatement psMascota = cn.prepareStatement("SELECT id_mascota FROM mascota WHERE nombre = ?")) {
                psMascota.setString(1, combo_mascota.getSelectedItem().toString());
                ResultSet rsMascota = psMascota.executeQuery();
                if (rsMascota.next()) {
                    id_mascota = rsMascota.getInt("id_mascota");
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró la mascota seleccionada.");
                    return;
                }
            }

            int id_empleado = -1;
            try ( PreparedStatement psEmpleado = cn.prepareStatement("SELECT id_empleado FROM empleado WHERE nombre = ?")) {
                psEmpleado.setString(1, txt_nom_empleado.getText().trim());
                ResultSet rsEmpleado = psEmpleado.executeQuery();
                if (rsEmpleado.next()) {
                    id_empleado = rsEmpleado.getInt("id_empleado");
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró el empleado seleccionado.");
                    return;
                }
            }

            // Actualizar en la base de datos
            String query = "UPDATE historial_consulta SET fecha_historial_consulta = ?, diagnostico = ?, precio_consulta = ?, id_mascota = ?, id_empleado = ? WHERE id_consulta = ?";
            try ( PreparedStatement ps = cn.prepareStatement(query)) {
                ps.setDate(1, fechaSQL);
                ps.setString(2, txt_diagnostico.getText().trim());
                ps.setDouble(3, Double.parseDouble(txt_precio.getText().trim()));
                ps.setInt(4, id_mascota);
                ps.setInt(5, id_empleado);
                ps.setInt(6, Integer.parseInt(idConsultaStr));
                int filas = ps.executeUpdate();

                if (filas > 0) {
                    JOptionPane.showMessageDialog(this, "Consulta actualizada correctamente.");
                    me.limpiarCampos(txt_precio, txt_diagnostico, txt_ident_empleado, txt_nom_empleado, txt_id_consulta, txt_ident_cliente, txt_nombre_cliente);
                    me.vaciarComboBox(combo_mascota);
                    combo_mascota.addItem("Seleccionar Mascota");
                    combo_mascota.setSelectedIndex(0);
                    btn_registrar.setEnabled(true);
                    mostrardatos();
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo actualizar la consulta.");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al actualizar consulta: " + e.getMessage());
        }


    }//GEN-LAST:event_btn_actualizarActionPerformed

    private void btn_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminarActionPerformed
        // TODO add your handling code here:
        String idConsultaStr = txt_id_consulta.getText().trim();
        if (idConsultaStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay consulta seleccionada para eliminar.");
            return;
        }

        int resp = JOptionPane.showConfirmDialog(this, "¿Está seguro de eliminar esta consulta?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
        if (resp != JOptionPane.YES_OPTION) {
            return;
        }

        try ( Connection cn = con.Conectar()) {
            String query = "DELETE FROM historial_consulta WHERE id_consulta = ?";
            try ( PreparedStatement ps = cn.prepareStatement(query)) {
                ps.setInt(1, Integer.parseInt(idConsultaStr));
                int filas = ps.executeUpdate();

                if (filas > 0) {
                    mostrardatos();
                    JOptionPane.showMessageDialog(this, "Consulta eliminada correctamente.");
                    me.limpiarCampos(txt_precio, txt_diagnostico, txt_ident_empleado, txt_nom_empleado, txt_id_consulta, txt_ident_cliente, txt_nombre_cliente, txt_fecha);
                    me.vaciarComboBox(combo_mascota);
                    mostrarFecha();
                    btn_registrar.setEnabled(true);
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo eliminar la consulta.");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al eliminar consulta: " + e.getMessage());
        }
    }//GEN-LAST:event_btn_eliminarActionPerformed

    private void jtable_datosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtable_datosMouseClicked
        // TODO add your handling code here:

        btn_registrar.setEnabled(false);
        btn_actualizar.setEnabled(true);

        int fila = this.jtable_datos.getSelectedRow();

        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona una fila.");
            return;
        }

        // Obtener valores de la fila
        String[] datos = new String[6];
        for (int i = 0; i < datos.length; i++) {
            datos[i] = this.jtable_datos.getValueAt(fila, i).toString();
        }

        // Asignar a los campos visibles
        this.txt_id_consulta.setText(datos[0]);
        this.txt_fecha.setText(datos[1]);
        this.txt_diagnostico.setText(datos[2]);
        this.txt_precio.setText(datos[3]);
        this.txt_nom_empleado.setText(datos[5]);

        // Buscar identidad y nombre del cliente, y mascotas asociadas
        try ( Connection cn = con.Conectar();  PreparedStatement ps1 = cn.prepareStatement(
                "SELECT c.identidad, c.nombre, c.id_cliente "
                + "FROM cliente c "
                + "JOIN mascota m ON c.id_cliente = m.id_cliente "
                //Limit para que
                + "WHERE m.nombre = ? LIMIT 1")) {
            ps1.setString(1, datos[4]); // nombre de la mascota
            ResultSet rs1 = ps1.executeQuery();
            if (rs1.next()) {
                this.txt_ident_cliente.setText(rs1.getString("identidad"));
                this.txt_nombre_cliente.setText(rs1.getString("nombre"));
                int id_cliente = rs1.getInt("id_cliente");

                // Llenar combo_mascota con todas las mascotas de este cliente
                me.vaciarComboBox(combo_mascota);
                combo_mascota.addItem("Seleccionar Mascota");
                try ( PreparedStatement ps2 = cn.prepareStatement(
                        "SELECT nombre FROM mascota WHERE id_cliente = ?")) {
                    ps2.setInt(1, id_cliente);
                    ResultSet rs2 = ps2.executeQuery();
                    while (rs2.next()) {
                        combo_mascota.addItem(rs2.getString("nombre"));
                    }
                    rs2.close();
                    ps2.close();
                }
                // Seleccionar la mascota de la fila
                combo_mascota.setSelectedItem(datos[4]);
            } else {
                this.txt_ident_cliente.setText("");
                this.txt_nombre_cliente.setText("");
                me.limpiarComboBox(combo_mascota);
                JOptionPane.showMessageDialog(this, "Cliente asociado a la mascota no encontrado.");
            }
            rs1.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al buscar cliente y mascotas.");
        }

        // Buscar identidad del empleado
        try ( Connection cn = con.Conectar();  PreparedStatement psEmp = cn.prepareStatement(
                "SELECT identidad FROM empleado WHERE nombre = ? LIMIT 1")) {
            psEmp.setString(1, datos[5]);
            ResultSet rsEmp = psEmp.executeQuery();
            if (rsEmp.next()) {
                this.txt_ident_empleado.setText(rsEmp.getString("identidad"));
            } else {
                this.txt_ident_empleado.setText("");
                JOptionPane.showMessageDialog(this, "Identidad del empleado no encontrada.");
            }
            rsEmp.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al buscar identidad del empleado.");
        }

    }//GEN-LAST:event_jtable_datosMouseClicked

    private void btn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarActionPerformed
        // TODO add your handling code here:
        me.limpiarCampos(txt_precio, txt_diagnostico, txt_ident_empleado, txt_nom_empleado, txt_id_consulta, txt_ident_cliente, txt_nombre_cliente);
        me.vaciarComboBox(combo_mascota);
        combo_mascota.addItem("Seleccionar Mascota");

        String busqueda = txt_buscar.getText().trim();
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("id");
        modelo.addColumn("Fecha");
        modelo.addColumn("Diagnostico");
        modelo.addColumn("Precio");
        modelo.addColumn("Mascota");
        modelo.addColumn("Empleado");
        jtable_datos.setModel(modelo);

        Connection cn = con.Conectar();

        if (busqueda.isEmpty()) {
            mostrardatos();
            JOptionPane.showMessageDialog(null, "Ingresa un nombre o id consulta ");
            return;
        }
        // Buscar por id_consulta (numérico) o nombre de mascota (texto)
        String query = "SELECT hc.id_consulta, hc.fecha_historial_consulta, hc.diagnostico, hc.precio_consulta, "
                + "m.nombre, e.nombre "
                + "FROM historial_consulta hc "
                + "JOIN mascota m ON hc.id_mascota = m.id_mascota "
                + "JOIN empleado e ON hc.id_empleado = e.id_empleado "
                + "WHERE hc.id_consulta = ? OR m.nombre LIKE ?";

        try {
            PreparedStatement ps = cn.prepareStatement(query);
            ps.setString(1, busqueda);
            ps.setString(2, "%" + busqueda + "%");

            ResultSet rs = ps.executeQuery();
            boolean hayResultados = false;
            while (rs.next()) {
                hayResultados = true;
                String[] fila = new String[6];
                fila[0] = rs.getString("id_consulta");
                fila[1] = rs.getString("fecha_historial_consulta");
                fila[2] = rs.getString("diagnostico");
                fila[3] = rs.getString("precio_consulta");
                fila[4] = rs.getString("m.nombre");
                fila[5] = rs.getString("e.nombre");
                modelo.addRow(fila);
            }
            rs.close();
            ps.close();
            cn.close();

            // Si no hubo resultados y no está vacío el campo de búsqueda, muestra todos los datos
            if (!hayResultados && !busqueda.isEmpty()) {
                mostrardatos();
                JOptionPane.showMessageDialog(this, "No se encontraron resultados. Mostrando todas las consultas.");
                me.limpiarCampos(txt_buscar);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al buscar consulta: " + e.getMessage());
        }
    }//GEN-LAST:event_btn_buscarActionPerformed

    private void btnbuscar_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbuscar_clienteActionPerformed
        // TODO add your handling code here:}

        btn_registrar.setEnabled(true);

        String identidad = txt_ident_cliente.getText();
        try {
            Connection cn = con.Conectar();

            PreparedStatement ps1 = cn.prepareStatement("SELECT id_cliente, nombre FROM cliente WHERE identidad = ?");
            ps1.setString(1, identidad);
            ResultSet rs = ps1.executeQuery();
            if (rs.next()) {
                int id_cliente = rs.getInt("id_cliente");
                txt_nombre_cliente.setText(rs.getString("nombre"));

                // Limpiar campos y ComboBox
                me.limpiarCampos(txt_precio, txt_diagnostico, txt_id_consulta);
                me.limpiarComboBox(combo_mascota);

                // Mascotas del cliente
                PreparedStatement ps2 = cn.prepareStatement("SELECT nombre FROM mascota WHERE id_cliente = ?");
                ps2.setInt(1, id_cliente);
                ResultSet rsMascota = ps2.executeQuery();

                // Limpiar y llenar combo
                combo_mascota.removeAllItems();
                combo_mascota.addItem("Seleccionar Mascota");
                while (rsMascota.next()) {
                    combo_mascota.addItem(rsMascota.getString("nombre"));
                }
                rsMascota.close();
                ps2.close();

            } else {
                JOptionPane.showMessageDialog(this, "Cliente no enconrado, tienes que registrarlo");
            }
            rs.close();
            ps1.close();
            cn.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Ocurrió un problema al buscar el cliente:\n" + e.getMessage());
        }
    }//GEN-LAST:event_btnbuscar_clienteActionPerformed

    private void txt_nom_empleadoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_nom_empleadoFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nom_empleadoFocusGained

    private void txt_nom_empleadoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_nom_empleadoFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nom_empleadoFocusLost

    private void txt_nom_empleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_nom_empleadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nom_empleadoActionPerformed

    private void btnbuscar_empleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbuscar_empleadoActionPerformed
        // TODO add your handling code here:

        btn_registrar.setEnabled(true);

        String identidad = txt_ident_empleado.getText();
        try {
            Connection cn = con.Conectar();

            PreparedStatement ps = cn.prepareStatement("SELECT nombre FROM empleado WHERE identidad = ?");
            ps.setString(1, identidad);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                txt_nom_empleado.setText(rs.getString("nombre"));
                me.limpiarCampos(txt_precio, txt_diagnostico, txt_id_consulta);

            } else {
                JOptionPane.showMessageDialog(null, "Empleado no encontrato, tienes que registrarlo");
            }
            rs.close();
            ps.close();
            cn.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Ocurrió un problema al buscar el empleado:\n" + e.getMessage());
        }
    }//GEN-LAST:event_btnbuscar_empleadoActionPerformed

    private void txt_id_consultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_id_consultaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_id_consultaActionPerformed

    private void txt_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_buscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_buscarActionPerformed

    private void txt_fechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_fechaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_fechaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Historial_Consulta_Vista.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Historial_Consulta_Vista.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Historial_Consulta_Vista.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Historial_Consulta_Vista.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Historial_Consulta_Vista().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_actualizar;
    private javax.swing.JButton btn_buscar;
    private javax.swing.JButton btn_eliminar;
    private javax.swing.JButton btn_registrar;
    private javax.swing.JButton btnbuscar_cliente;
    private javax.swing.JButton btnbuscar_empleado;
    private javax.swing.JComboBox<String> combo_mascota;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jtable_datos;
    private javax.swing.JTextField txt_buscar;
    private javax.swing.JTextField txt_diagnostico;
    private javax.swing.JTextField txt_fecha;
    private javax.swing.JTextField txt_id_consulta;
    private javax.swing.JTextField txt_ident_cliente;
    private javax.swing.JTextField txt_ident_empleado;
    private javax.swing.JTextField txt_nom_empleado;
    private javax.swing.JTextField txt_nombre_cliente;
    private javax.swing.JTextField txt_precio;
    // End of variables declaration//GEN-END:variables

    private void mostrardatos() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("id");
        modelo.addColumn("Fecha");
        modelo.addColumn("Diagnostico");
        modelo.addColumn("Precio");
        modelo.addColumn("Mascota");
        modelo.addColumn("Empleado");
        jtable_datos.setModel(modelo);

        String query = "SELECT hc.id_consulta, hc.fecha_historial_consulta, hc.diagnostico, hc.precio_consulta, "
                + "m.nombre, e.nombre "
                + "FROM historial_consulta hc "
                + "JOIN mascota m ON hc.id_mascota = m.id_mascota "
                + "JOIN empleado e ON hc.id_empleado = e.id_empleado";

        Connection cn = con.Conectar();

        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                String[] fila = new String[6];
                fila[0] = rs.getString("id_consulta");
                fila[1] = rs.getString("fecha_historial_consulta");
                fila[2] = rs.getString("diagnostico");
                fila[3] = rs.getString("precio_consulta");
                fila[4] = rs.getString("m.nombre");
                fila[5] = rs.getString("e.nombre");
                modelo.addRow(fila);
            }
            rs.close();
            st.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al mostrar datos: ");
        }
    }

    private void mostrarFecha() {
        LocalDate fechaActual = LocalDate.now();
        DateTimeFormatter formato = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        txt_fecha.setText(fechaActual.format(formato));
    }

    public JPanel getPanelHistorial() {
        return jPanel1;
    }

    private void configurarSegunRol(String rol) {
        if ((rol.equalsIgnoreCase("Veterinario")) || (rol.equalsIgnoreCase("Recepcionista"))) {
            btn_eliminar.setEnabled(false);
            // desactiva los botones que desees
        }
    }
}
