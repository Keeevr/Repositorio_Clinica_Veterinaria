package CRUD_Veterinaria;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.LocalTime;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

public class Cita_Mascota_Vista extends javax.swing.JFrame {

    Metodos me = new Metodos();
    conexion con = new conexion();

    public Cita_Mascota_Vista() {
        initComponents();
        mostrardatos();
        agregarListenerFecha();
        configurarRol(Sesion.rolActual);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        txt_nombre_cliente = new javax.swing.JTextField();
        btn_registrar = new javax.swing.JButton();
        btn_actualizar = new javax.swing.JButton();
        btn_eliminar = new javax.swing.JButton();
        btnbuscar_cliente = new javax.swing.JButton();
        txt_ident_cliente = new javax.swing.JTextField();
        txt_nom_empleado = new javax.swing.JTextField();
        txt_ident_empleado = new javax.swing.JTextField();
        btnbuscar_empleado = new javax.swing.JButton();
        txt_proposito = new javax.swing.JTextField();
        txt_idcita = new javax.swing.JTextField();
        combo_mascota = new javax.swing.JComboBox<>();
        dtp_fecha_hora = new com.github.lgooddatepicker.components.DateTimePicker();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtable_datos = new javax.swing.JTable();
        txt_buscar = new javax.swing.JTextField();
        btn_buscar = new javax.swing.JButton();
        datepicker_buscar_fecha = new com.github.lgooddatepicker.components.DatePicker();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(106, 56, 56));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Registro e Historial de Citas", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18), new java.awt.Color(255, 248, 240))); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(1246, 597));

        jPanel2.setBackground(new java.awt.Color(255, 248, 240));

        txt_nombre_cliente.setEditable(false);
        txt_nombre_cliente.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        txt_nombre_cliente.setMinimumSize(new java.awt.Dimension(65, 65));
        txt_nombre_cliente.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_nombre_clienteFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_nombre_clienteFocusLost(evt);
            }
        });
        txt_nombre_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_nombre_clienteActionPerformed(evt);
            }
        });

        btn_registrar.setText("Registrar");
        btn_registrar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_registrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_registrarActionPerformed(evt);
            }
        });

        btn_actualizar.setText("Actualizar");
        btn_actualizar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_actualizarActionPerformed(evt);
            }
        });

        btn_eliminar.setText("Eliminar");
        btn_eliminar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminarActionPerformed(evt);
            }
        });

        btnbuscar_cliente.setText("Buscar");
        btnbuscar_cliente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnbuscar_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbuscar_clienteActionPerformed(evt);
            }
        });

        txt_ident_cliente.setBorder(javax.swing.BorderFactory.createTitledBorder("Identidad del Cliente"));

        txt_nom_empleado.setEditable(false);
        txt_nom_empleado.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        txt_nom_empleado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_nom_empleadoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_nom_empleadoFocusLost(evt);
            }
        });
        txt_nom_empleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_nom_empleadoActionPerformed(evt);
            }
        });

        txt_ident_empleado.setBorder(javax.swing.BorderFactory.createTitledBorder("Identidad del Empleado"));

        btnbuscar_empleado.setText("Buscar");
        btnbuscar_empleado.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnbuscar_empleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbuscar_empleadoActionPerformed(evt);
            }
        });

        txt_proposito.setBorder(javax.swing.BorderFactory.createTitledBorder("Proposito\n\n"));

        txt_idcita.setEditable(false);
        txt_idcita.setBorder(javax.swing.BorderFactory.createTitledBorder("Id Cita"));
        txt_idcita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_idcitaActionPerformed(evt);
            }
        });

        combo_mascota.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar Mascota" }));

        dtp_fecha_hora.setBorder(javax.swing.BorderFactory.createTitledBorder("Fecha y Hora de Cita"));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dtp_fecha_hora, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txt_proposito)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txt_nom_empleado, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_idcita))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txt_ident_empleado, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnbuscar_empleado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txt_nombre_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_mascota, 0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btn_registrar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(btn_actualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btn_eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txt_ident_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnbuscar_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_ident_cliente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnbuscar_cliente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_nombre_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_mascota, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_ident_empleado, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnbuscar_empleado, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_idcita, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_nom_empleado, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(dtp_fecha_hora, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txt_proposito, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btn_actualizar, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                    .addComponent(btn_registrar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_eliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 248, 240));
        jPanel3.setPreferredSize(new java.awt.Dimension(740, 543));

        jtable_datos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "", "", "", ""
            }
        ));
        jtable_datos.setToolTipText("");
        jtable_datos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtable_datosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtable_datos);

        txt_buscar.setBorder(javax.swing.BorderFactory.createTitledBorder("Ingresa nombre de la Mascota o Id Cita"));
        txt_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_buscarActionPerformed(evt);
            }
        });

        btn_buscar.setText("Buscar");
        btn_buscar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 716, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(datepicker_buscar_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                        .addComponent(txt_buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(btn_buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(datepicker_buscar_fecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btn_buscar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_buscar, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator2)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 543, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_nombre_clienteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_nombre_clienteFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nombre_clienteFocusGained

    private void txt_nombre_clienteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_nombre_clienteFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nombre_clienteFocusLost

    private void txt_nombre_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_nombre_clienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nombre_clienteActionPerformed

    private void btn_registrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_registrarActionPerformed
        // Validación de campos vacíos
        if (txt_nombre_cliente.getText().trim().isEmpty()
                || txt_nom_empleado.getText().trim().isEmpty()
                || txt_proposito.getText().trim().isEmpty()
                || combo_mascota.getSelectedItem() == null
                || combo_mascota.getSelectedItem().toString().equals("Seleccionar Mascota")
                || dtp_fecha_hora.getDatePicker().getDate() == null
                || dtp_fecha_hora.getTimePicker().getTime() == null) {

            JOptionPane.showMessageDialog(this, "Por favor, completa todos los campos requeridos.");
            return;
        }
        try (Connection cn = con.Conectar()) {
            // Obtener id_mascota por nombre
            int id_mascota = -1;
            String query1 = "SELECT id_mascota FROM mascota WHERE nombre = ?";
            try (PreparedStatement ps = cn.prepareStatement(query1)) {
                ps.setString(1, combo_mascota.getSelectedItem().toString());
                ResultSet rs = ps.executeQuery();
                if (rs.next()) {
                    id_mascota = rs.getInt("id_mascota");
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró la mascota seleccionada.");
                    return;
                }
            }
            // Obtener id_empleado por identidad
            int id_empleado = -1;
            String query2 = "SELECT id_empleado FROM empleado WHERE identidad = ?";
            try (PreparedStatement ps = cn.prepareStatement(query2)) {
                ps.setString(1, txt_ident_empleado.getText().trim());
                ResultSet rs = ps.executeQuery();
                if (rs.next()) {
                    id_empleado = rs.getInt("id_empleado");
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró el empleado.");
                    return;
                }
            }
            //aqui
            // Verificar si ya existe una cita para esa mascota en esa fecha y hora
            String checkMasQuery = "SELECT 1 FROM cita_mascotas WHERE id_mascota = ? AND fecha = ? AND hora = ?";
            try (PreparedStatement ps = cn.prepareStatement(checkMasQuery)) {
                ps.setInt(1, id_mascota);
                ps.setDate(2, java.sql.Date.valueOf(dtp_fecha_hora.getDatePicker().getDate()));
                ps.setTime(3, java.sql.Time.valueOf(dtp_fecha_hora.getTimePicker().getTime()));

                try (ResultSet rs = ps.executeQuery()) {
                    if (rs.next()) { // Si hay al menos una fila, ya existe la cita
                        JOptionPane.showMessageDialog(this, "YA EXISTE UNA CITA PARA LA MASCOTA EN LA FECHA Y HORA SELECCIONADA.");
                        return;
                    }
                }
            }

            // Verificar si el veterinario ya tiene una cita en esa fecha y hora
            String checkVetQuery = "SELECT 1 FROM cita_mascotas WHERE id_empleado = ? AND fecha = ? AND hora = ?";

            try (PreparedStatement ps = cn.prepareStatement(checkVetQuery)) {
                ps.setInt(1, id_empleado);
                ps.setDate(2, java.sql.Date.valueOf(dtp_fecha_hora.getDatePicker().getDate()));
                ps.setTime(3, java.sql.Time.valueOf(dtp_fecha_hora.getTimePicker().getTime()));

                try (ResultSet rs = ps.executeQuery()) {
                    if (rs.next()) { // Si hay al menos una coincidencia
                        JOptionPane.showMessageDialog(this, "YA EXISTE UNA CITA PARA EL VETERINARIO EN LA FECHA Y HORA SELECCIONADA.");
                        return;
                    }
                }
            }

            /*
            // Verificar si ya existe una cita para esa mascota en esa fecha y hora
            String checkMasQuery = "SELECT COUNT(*) FROM cita_mascotas WHERE id_mascota = ? AND fecha = ? AND hora = ?";
            try (PreparedStatement ps = cn.prepareStatement(checkMasQuery)) {
                ps.setInt(1, id_mascota);
                ps.setDate(2, java.sql.Date.valueOf(dtp_fecha_hora.getDatePicker().getDate()));
                ps.setTime(3, java.sql.Time.valueOf(dtp_fecha_hora.getTimePicker().getTime()));
                ResultSet rs = ps.executeQuery();
                if (rs.next() && rs.getInt(1) > 0) {
                    JOptionPane.showMessageDialog(this, "YA EXISTE UNA CITA PARA LA MASCOTA EN LA FECHA Y HORA SELECCIONADA.");
                    return;
                }
            }
            // Verificar si el veterinario ya tiene una cita en esa fecha y hora
            String checkVetQuery = "SELECT COUNT(*) FROM cita_mascotas WHERE id_empleado = ? AND fecha = ? AND hora = ?";
            try (PreparedStatement ps = cn.prepareStatement(checkVetQuery)) {
                ps.setInt(1, id_empleado);
                ps.setDate(2, java.sql.Date.valueOf(dtp_fecha_hora.getDatePicker().getDate()));
                ps.setTime(3, java.sql.Time.valueOf(dtp_fecha_hora.getTimePicker().getTime()));
                ResultSet rs = ps.executeQuery();
                if (rs.next() && rs.getInt(1) > 0) {
                    JOptionPane.showMessageDialog(this, "YA EXISTE UNA CITA PARA EL VETERINARIO EN LA FECHA Y HORA SELECCIONADA.");
                    return;
                }
            }*/
            // Insertar cita en cita_mascotas
            String quer3 = "INSERT INTO cita_mascotas (fecha, hora, proposito, id_mascota, id_empleado) VALUES (?, ?, ?, ?, ?)";
            try (PreparedStatement ps = cn.prepareStatement(quer3)) {
                ps.setDate(1, java.sql.Date.valueOf(dtp_fecha_hora.getDatePicker().getDate()));
                ps.setTime(2, java.sql.Time.valueOf(dtp_fecha_hora.getTimePicker().getTime()));
                ps.setString(3, txt_proposito.getText().trim());
                ps.setInt(4, id_mascota);
                ps.setInt(5, id_empleado);
                ps.executeUpdate();

                JOptionPane.showMessageDialog(this, "Cita registrada correctamente.");
                me.limpiarCampos(txt_ident_cliente, txt_nombre_cliente, txt_ident_empleado, txt_nom_empleado, txt_proposito, txt_idcita);
                me.vaciarComboBox(combo_mascota);
                me.limpiarDateTimePicker(dtp_fecha_hora);
                mostrardatos();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al registrar cita");
        }
    }//GEN-LAST:event_btn_registrarActionPerformed

    private void btn_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_actualizarActionPerformed
        // Validar que haya una cita seleccionada
        String idCitaStr = txt_idcita.getText().trim();
        if (idCitaStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay cita seleccionada para actualizar.");
            return;
        }

        // Validación de campos vacíos
        if (txt_nombre_cliente.getText().trim().isEmpty()
                || txt_nom_empleado.getText().trim().isEmpty()
                || txt_proposito.getText().trim().isEmpty()
                || combo_mascota.getSelectedItem() == null
                || combo_mascota.getSelectedItem().toString().equals("Seleccionar Mascota")
                || dtp_fecha_hora.getDatePicker().getDate() == null
                || dtp_fecha_hora.getTimePicker().getTime() == null) {

            JOptionPane.showMessageDialog(this, "Por favor, completa todos los campos requeridos.");
            return;
        }

        try (Connection cn = con.Conectar()) {
            // Obtener id_mascota por nombre
            int id_mascota = -1;
            try (PreparedStatement ps = cn.prepareStatement("SELECT id_mascota FROM mascota WHERE nombre = ?")) {
                ps.setString(1, combo_mascota.getSelectedItem().toString());
                try (ResultSet rs = ps.executeQuery()) {
                    if (rs.next()) {
                        id_mascota = rs.getInt("id_mascota");
                    } else {
                        JOptionPane.showMessageDialog(this, "No se encontró la mascota seleccionada.");
                        return;
                    }
                }
            }

            // Obtener id_empleado por identidad
            int id_empleado = -1;
            try (PreparedStatement ps = cn.prepareStatement("SELECT id_empleado FROM empleado WHERE identidad = ?")) {
                ps.setString(1, txt_ident_empleado.getText().trim());
                try (ResultSet rs = ps.executeQuery()) {
                    if (rs.next()) {
                        id_empleado = rs.getInt("id_empleado");
                    } else {
                        JOptionPane.showMessageDialog(this, "No se encontró el empleado.");
                        return;
                    }
                }
            }
            // Verificar si ya existe otra cita para esa mascota en esa fecha y hora (excluyendo la actual)
            String checkMascotaQuery = "SELECT 1 FROM cita_mascotas WHERE id_mascota = ? AND fecha = ? AND hora = ? AND id_cita_mascota <> ?";
            try (PreparedStatement ps = cn.prepareStatement(checkMascotaQuery)) {
                ps.setInt(1, id_mascota);
                ps.setDate(2, java.sql.Date.valueOf(dtp_fecha_hora.getDatePicker().getDate()));
                ps.setTime(3, java.sql.Time.valueOf(dtp_fecha_hora.getTimePicker().getTime()));
                ps.setInt(4, Integer.parseInt(idCitaStr));
                ResultSet rs = ps.executeQuery();
                if (rs.next()) {
                    JOptionPane.showMessageDialog(this, "Ya existe otra cita para esa mascota en la fecha y hora seleccionadas.");
                    return;
                }
            }

            // Verificar si el veterinario ya tiene otra cita en esa fecha y hora (excluyendo la actual)
            String checkVetQuery = "SELECT 1 FROM cita_mascotas WHERE id_empleado = ? AND fecha = ? AND hora = ? AND id_cita_mascota <> ?";
            try (PreparedStatement ps = cn.prepareStatement(checkVetQuery)) {
                ps.setInt(1, id_empleado);
                ps.setDate(2, java.sql.Date.valueOf(dtp_fecha_hora.getDatePicker().getDate()));
                ps.setTime(3, java.sql.Time.valueOf(dtp_fecha_hora.getTimePicker().getTime()));
                ps.setInt(4, Integer.parseInt(idCitaStr));
                ResultSet rs = ps.executeQuery();
                if (rs.next()) {
                    JOptionPane.showMessageDialog(this, "El veterinario seleccionado ya tiene otra cita en esa fecha y hora.");
                    return;
                }
            }
            // Actualizar cita en cita_mascotas
            String query = "UPDATE cita_mascotas SET fecha = ?, hora = ?, proposito = ?, id_mascota = ?, id_empleado = ? WHERE id_cita_mascota = ?";
            try (PreparedStatement ps = cn.prepareStatement(query)) {
                ps.setDate(1, java.sql.Date.valueOf(dtp_fecha_hora.getDatePicker().getDate()));
                ps.setTime(2, java.sql.Time.valueOf(dtp_fecha_hora.getTimePicker().getTime()));
                ps.setString(3, txt_proposito.getText().trim());
                ps.setInt(4, id_mascota);
                ps.setInt(5, id_empleado);
                ps.setInt(6, Integer.parseInt(idCitaStr));
                int filas = ps.executeUpdate();

                if (filas > 0) {
                    JOptionPane.showMessageDialog(this, "Cita actualizada correctamente.");
                    me.limpiarCampos(txt_ident_cliente, txt_nombre_cliente, txt_ident_empleado, txt_nom_empleado, txt_proposito, txt_idcita);
                    me.vaciarComboBox(combo_mascota);
                    me.limpiarDateTimePicker(dtp_fecha_hora);
                    btn_registrar.setEnabled(true);
                    mostrardatos();
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo actualizar la cita.");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al actualizar cita");
        }

    }//GEN-LAST:event_btn_actualizarActionPerformed

    private void btn_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminarActionPerformed
        // TODO add your handling code here:
        String idCitaStr = txt_idcita.getText().trim();
        if (idCitaStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay cita seleccionada para eliminar.");
            return;
        }

        int resp = JOptionPane.showConfirmDialog(this, "¿Está seguro de eliminar esta cita?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
        if (resp == JOptionPane.NO_OPTION) {
            return;
        }

        try (Connection cn = con.Conectar()) {
            String query = "DELETE FROM cita_mascotas WHERE id_cita_mascota = ?";
            try (PreparedStatement ps = cn.prepareStatement(query)) {
                ps.setInt(1, Integer.parseInt(idCitaStr));
                int filas = ps.executeUpdate();

                if (filas > 0) {
                    mostrardatos();
                    JOptionPane.showMessageDialog(this, "Cita eliminada correctamente.");
                    me.limpiarCampos(txt_ident_cliente, txt_nombre_cliente, txt_ident_empleado, txt_nom_empleado, txt_proposito, txt_idcita);
                    me.limpiarComboBox(combo_mascota);
                    me.limpiarDateTimePicker(dtp_fecha_hora);
                    combo_mascota.setSelectedIndex(0);
                    btn_registrar.setEnabled(true);
                    btn_actualizar.setEnabled(false);
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo eliminar la cita.");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al eliminar cita");
        }
    }//GEN-LAST:event_btn_eliminarActionPerformed

    private void btnbuscar_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbuscar_clienteActionPerformed
        // TODO add your handling code here:}
        btn_registrar.setEnabled(true);
        String identidad = txt_ident_cliente.getText();

        String query = "SELECT id_cliente, nombre FROM cliente WHERE identidad = ?";
        try (Connection cn = con.Conectar(); PreparedStatement ps1 = cn.prepareStatement(query)) {
            ps1.setString(1, identidad);

            try (ResultSet rs = ps1.executeQuery()) {
                if (rs.next()) {
                    int id_cliente = rs.getInt("id_cliente");
                    txt_nombre_cliente.setText(rs.getString("nombre"));

                    // Limpiar campos y ComboBox
                    me.limpiarCampos(txt_proposito, txt_idcita);
                    me.limpiarComboBox(combo_mascota);

                    // Mascotas del cliente
                    String query2 = "SELECT nombre FROM mascota WHERE id_cliente = ?";
                    try (PreparedStatement ps2 = cn.prepareStatement(query2)) {
                        ps2.setInt(1, id_cliente);

                        try (ResultSet rsMascota = ps2.executeQuery()) {
                            combo_mascota.removeAllItems();
                            combo_mascota.addItem("Seleccionar Mascota");
                            while (rsMascota.next()) {
                                combo_mascota.addItem(rsMascota.getString("nombre"));
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this,
                            "Cliente no encontrado, tienes que registrarlo");
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Ocurrió un problema al buscar el cliente");
        }
    }//GEN-LAST:event_btnbuscar_clienteActionPerformed

    private void txt_nom_empleadoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_nom_empleadoFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nom_empleadoFocusGained

    private void txt_nom_empleadoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_nom_empleadoFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nom_empleadoFocusLost

    private void txt_nom_empleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_nom_empleadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nom_empleadoActionPerformed

    private void btnbuscar_empleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbuscar_empleadoActionPerformed
        // TODO add your handling code here:
        btn_registrar.setEnabled(true);
        String identidad = txt_ident_empleado.getText();

        String query1 = "SELECT nombre FROM empleado WHERE identidad = ?";
        try (Connection cn = con.Conectar(); PreparedStatement ps = cn.prepareStatement(query1)) {

            ps.setString(1, identidad);

            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    txt_nom_empleado.setText(rs.getString("nombre"));
                    me.limpiarCampos(txt_proposito, txt_idcita);
                    me.limpiarDateTimePicker(dtp_fecha_hora);
                } else {
                    JOptionPane.showMessageDialog(null, "Empleado no encontrado, tienes que registrarlo");
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Ocurrió un problema al buscar el empleado");
        }
    }//GEN-LAST:event_btnbuscar_empleadoActionPerformed

    private void txt_idcitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_idcitaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_idcitaActionPerformed

    private void jtable_datosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtable_datosMouseClicked
        btn_registrar.setEnabled(false);
        btn_actualizar.setEnabled(true);

        int fila = jtable_datos.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona una fila.");
            return;
        }

        // Obtener valores de la fila
        String[] datos = new String[6];
        for (int i = 0; i < datos.length; i++) {
            datos[i] = jtable_datos.getValueAt(fila, i).toString();
        }

        // Asignar a los campos visibles
        txt_idcita.setText(datos[0]);
        txt_proposito.setText(datos[3]);
        txt_nom_empleado.setText(datos[5]);

        // Establecer fecha y hora en DateTimePicker
        try {
            LocalDate fecha = LocalDate.parse(datos[1]); // Formato esperado: YYYY-MM-DD
            LocalTime hora = LocalTime.parse(datos[2]);  // Formato esperado: HH:MM:SS
            dtp_fecha_hora.getDatePicker().setDate(fecha);
            dtp_fecha_hora.getTimePicker().setTime(hora);
        } catch (DateTimeException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al cargar fecha u hora");
            return;
        }

        // Buscar identidad, nombre del cliente y mascotas asociadas
        String query1 = "SELECT c.identidad, c.nombre, c.id_cliente "
                + "FROM cliente c JOIN mascota m ON c.id_cliente = m.id_cliente "
                + "WHERE m.nombre = ? LIMIT 1";
        try (Connection cn = con.Conectar(); PreparedStatement ps1 = cn.prepareStatement(query1)) {
            ps1.setString(1, datos[4]); // nombre de la mascota
            try (ResultSet rs1 = ps1.executeQuery()) {
                if (rs1.next()) {
                    txt_ident_cliente.setText(rs1.getString("identidad"));
                    txt_nombre_cliente.setText(rs1.getString("nombre"));
                    int id_cliente = rs1.getInt("id_cliente");

                    // Llenar combo_mascota con todas las mascotas del cliente
                    me.vaciarComboBox(combo_mascota);
                    combo_mascota.addItem("Seleccionar Mascota");
                    String query2 = "SELECT nombre FROM mascota WHERE id_cliente = ?";
                    try (PreparedStatement ps2 = cn.prepareStatement(query2)) {
                        ps2.setInt(1, id_cliente);

                        try (ResultSet rs2 = ps2.executeQuery()) {
                            while (rs2.next()) {
                                combo_mascota.addItem(rs2.getString("nombre"));
                            }
                        }
                    }
                    combo_mascota.setSelectedItem(datos[4]);
                } else {
                    me.limpiarCampos(txt_ident_cliente, txt_nombre_cliente);
                    me.limpiarComboBox(combo_mascota);
                    combo_mascota.addItem("Seleccionar Mascota");
                    JOptionPane.showMessageDialog(this, "Cliente asociado a la mascota no encontrado.");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al buscar cliente y mascotas");
        }

        // Buscar identidad del empleado
        String query3 = "SELECT identidad FROM empleado WHERE nombre = ? LIMIT 1";
        try (Connection cn = con.Conectar(); PreparedStatement psEmp = cn.prepareStatement(query3)) {
            psEmp.setString(1, datos[5]);
            try (ResultSet rsEmp = psEmp.executeQuery()) {
                if (rsEmp.next()) {
                    txt_ident_empleado.setText(rsEmp.getString("identidad"));
                } else {
                    me.limpiarCampos(txt_ident_empleado);
                    JOptionPane.showMessageDialog(this, "Identidad del empleado no encontrada.");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al buscar identidad del empleado");
        }
    }//GEN-LAST:event_jtable_datosMouseClicked

    private void txt_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_buscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_buscarActionPerformed

    private void btn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarActionPerformed
        // Limpiar campos y combos
        me.limpiarCampos(txt_ident_cliente, txt_nombre_cliente, txt_ident_empleado, txt_nom_empleado, txt_proposito, txt_idcita);
        me.vaciarComboBox(combo_mascota);
        me.limpiarDateTimePicker(dtp_fecha_hora);
        combo_mascota.addItem("Seleccionar Mascota");

        String busqueda = txt_buscar.getText().trim();
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Cita");
        modelo.addColumn("Fecha");
        modelo.addColumn("Hora");
        modelo.addColumn("Proposito");
        modelo.addColumn("Mascota");
        modelo.addColumn("Veterinario");
        jtable_datos.setModel(modelo);

        if (busqueda.isEmpty()) {
            mostrardatos();
            JOptionPane.showMessageDialog(this, "Ingresa un nombre de mascota o ID de cita.");
            return;
        }

        // Buscar por id_cita_mascota (numérico) o nombre de mascota (texto)
        String query = "SELECT c.id_cita_mascota, c.fecha, c.hora, c.proposito, m.nombre AS nombre_mascota, e.nombre AS nombre_veterinario "
                + "FROM cita_mascotas c "
                + "JOIN mascota m ON c.id_mascota = m.id_mascota "
                + "JOIN empleado e ON c.id_empleado = e.id_empleado "
                + "WHERE c.id_cita_mascota = ? OR m.nombre LIKE ?";

        try (Connection cn = con.Conectar(); PreparedStatement ps = cn.prepareStatement(query)) {

            ps.setString(1, busqueda);
            ps.setString(2, "%" + busqueda + "%");

            try (ResultSet rs = ps.executeQuery()) {
                boolean hayResultados = false;
                while (rs.next()) {
                    hayResultados = true;
                    String[] fila = new String[6];
                    fila[0] = rs.getString("id_cita_mascota");
                    fila[1] = rs.getString("fecha");
                    fila[2] = rs.getString("hora");
                    fila[3] = rs.getString("proposito");
                    fila[4] = rs.getString("nombre_mascota");
                    fila[5] = rs.getString("nombre_veterinario");
                    modelo.addRow(fila);
                }

                if (!hayResultados) {
                    mostrardatos();
                    JOptionPane.showMessageDialog(this, "No se encontraron resultados. Mostrando todas las citas.");
                    me.limpiarCampos(txt_buscar);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al buscar cita");
        }
    }//GEN-LAST:event_btn_buscarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cita_Mascota_Vista.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cita_Mascota_Vista.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cita_Mascota_Vista.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cita_Mascota_Vista.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cita_Mascota_Vista().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_actualizar;
    private javax.swing.JButton btn_buscar;
    private javax.swing.JButton btn_eliminar;
    private javax.swing.JButton btn_registrar;
    private javax.swing.JButton btnbuscar_cliente;
    private javax.swing.JButton btnbuscar_empleado;
    private javax.swing.JComboBox<String> combo_mascota;
    private com.github.lgooddatepicker.components.DatePicker datepicker_buscar_fecha;
    private com.github.lgooddatepicker.components.DateTimePicker dtp_fecha_hora;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jtable_datos;
    private javax.swing.JTextField txt_buscar;
    private javax.swing.JTextField txt_idcita;
    private javax.swing.JTextField txt_ident_cliente;
    private javax.swing.JTextField txt_ident_empleado;
    private javax.swing.JTextField txt_nom_empleado;
    private javax.swing.JTextField txt_nombre_cliente;
    private javax.swing.JTextField txt_proposito;
    // End of variables declaration//GEN-END:variables

    private void mostrardatos() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Cita");
        modelo.addColumn("Fecha");
        modelo.addColumn("Hora");
        modelo.addColumn("Proposito");
        modelo.addColumn("Mascota");
        modelo.addColumn("Veterinario");
        jtable_datos.setModel(modelo);

        String query = "SELECT cm.id_cita_mascota, cm.fecha, cm.hora, cm.proposito, m.nombre AS nombre_mascota, e.nombre AS nombre_empleado "
                + "FROM cita_mascotas cm "
                + "JOIN mascota m ON cm.id_mascota = m.id_mascota "
                + "JOIN empleado e ON cm.id_empleado = e.id_empleado";

        try (Connection cn = con.Conectar(); PreparedStatement ps = cn.prepareStatement(query); ResultSet rs = ps.executeQuery()) {

            while (rs.next()) {
                String[] fila = new String[6];
                fila[0] = rs.getString("id_cita_mascota");
                fila[1] = rs.getString("fecha");
                fila[2] = rs.getString("hora");
                fila[3] = rs.getString("proposito");
                fila[4] = rs.getString("nombre_mascota");
                fila[5] = rs.getString("nombre_empleado");
                modelo.addRow(fila);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al mostrar datos: ");
        }
    }

    private void agregarListenerFecha() {
        datepicker_buscar_fecha.addDateChangeListener(event -> {
            filtrarPorFechaCita();
        });
    }

    private void filtrarPorFechaCita() {
        java.time.LocalDate fechaSeleccionada = datepicker_buscar_fecha.getDate();
        if (fechaSeleccionada == null) {
            mostrardatos(); // Si no hay fecha, muestra todo
            return;
        }

        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Cita");
        modelo.addColumn("Fecha");
        modelo.addColumn("Hora");
        modelo.addColumn("Proposito");
        modelo.addColumn("Mascota");
        modelo.addColumn("Veterinario");
        jtable_datos.setModel(modelo);

        String query = "SELECT c.id_cita_mascota, c.fecha, c.hora, c.proposito, m.nombre AS nombre_mascota, e.nombre AS nombre_veterinario "
                + "FROM cita_mascotas c "
                + "JOIN mascota m ON c.id_mascota = m.id_mascota "
                + "JOIN empleado e ON c.id_empleado = e.id_empleado "
                + "WHERE c.fecha = ?";

        try (Connection cn = con.Conectar(); PreparedStatement ps = cn.prepareStatement(query)) {
            ps.setDate(1, java.sql.Date.valueOf(fechaSeleccionada));
            try (ResultSet rs = ps.executeQuery()) {
                boolean hayResultados = false;
                while (rs.next()) {
                    hayResultados = true;
                    String[] fila = new String[6];
                    fila[0] = rs.getString("id_cita_mascota");
                    fila[1] = rs.getString("fecha");
                    fila[2] = rs.getString("hora");
                    fila[3] = rs.getString("proposito");
                    fila[4] = rs.getString("nombre_mascota");
                    fila[5] = rs.getString("nombre_veterinario");
                    modelo.addRow(fila);
                }
                if (!hayResultados) {
                    mostrardatos();
                    JOptionPane.showMessageDialog(this, "No hay citas para la fecha seleccionada.");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al filtrar por fecha");
        }
    }

    public JPanel getPanelCitas() {
        return jPanel1;
    }

    private void configurarRol(String rol) {
        if ((rol.equalsIgnoreCase("Veterinario")) || (rol.equalsIgnoreCase("Recepcionista"))) {
            btn_eliminar.setEnabled(false);
        }
    }
}
