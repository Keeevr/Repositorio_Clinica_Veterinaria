package CRUD_Veterinaria;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.sql.PreparedStatement;

/**
 *
 * @author maynorlinux
 */
public class Historial_Factura_Vista extends javax.swing.JFrame {

    Metodos me = new Metodos();
    conexion con = new conexion();

    /**
     * Creates new form Formulario_Hist_Vista
     */
    public Historial_Factura_Vista() {
        initComponents();
        mostrardatos();
        mostrardatos(WIDTH);
        mostrardatosConsulta(WIDTH);
        agregarListenerFecha();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMonthChooser1 = new com.toedter.calendar.JMonthChooser();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Factura = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_Medi = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable_cons = new javax.swing.JTable();
        jdcfiltro_fecha = new com.toedter.calendar.JDateChooser();
        btnlistar = new javax.swing.JButton();
        btnimprimir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(207, 185, 151));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Historial de Facturas", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N
        jPanel2.setPreferredSize(new java.awt.Dimension(1246, 597));

        jPanel1.setBackground(new java.awt.Color(237, 232, 208));

        jTable_Factura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_Factura.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_FacturaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_Factura);

        jTable_Medi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable_Medi);

        jTable_cons.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable_cons);

        jdcfiltro_fecha.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleciona una Fecha"));

        btnlistar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnlistar.setText("LISTAR DATOS");
        btnlistar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnlistarActionPerformed(evt);
            }
        });

        btnimprimir.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnimprimir.setText("IMPRIMIR");
        btnimprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnimprimirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jdcfiltro_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(154, 154, 154)
                                .addComponent(btnlistar))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnimprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jdcfiltro_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnlistar, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnimprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1109, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable_FacturaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_FacturaMouseClicked
        // TODO add your handling code here:
        int fila = jTable_Factura.getSelectedRow();
        
        if (fila >= 0) {
            String idFactura = jTable_Factura.getValueAt(fila, 0).toString();
            int idFacturaInt = Integer.parseInt(idFactura);
            // Mostrar detalles de medicamentos
            mostrardatos(idFacturaInt);
            // Mostrar detalles de consultas
            mostrardatosConsulta(idFacturaInt);
        } else {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado ninguna fila.");
        }
    }//GEN-LAST:event_jTable_FacturaMouseClicked

    private void btnlistarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnlistarActionPerformed
        mostrardatos(WIDTH);
        mostrardatosConsulta(WIDTH);
        mostrardatos();
        me.limpiarDateChooser(jdcfiltro_fecha);
    }//GEN-LAST:event_btnlistarActionPerformed

    private void btnimprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnimprimirActionPerformed
        // TODO add your handling code here:
        
        
        
    }//GEN-LAST:event_btnimprimirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Historial_Factura_Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Historial_Factura_Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Historial_Factura_Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Historial_Factura_Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Historial_Factura_Vista().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnimprimir;
    private javax.swing.JButton btnlistar;
    private com.toedter.calendar.JMonthChooser jMonthChooser1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable_Factura;
    private javax.swing.JTable jTable_Medi;
    private javax.swing.JTable jTable_cons;
    private com.toedter.calendar.JDateChooser jdcfiltro_fecha;
    // End of variables declaration//GEN-END:variables

    private void mostrardatos() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Factura");
        modelo.addColumn("Fecha Emision");
        modelo.addColumn("SubTotal");
        modelo.addColumn("Impuesto");
        modelo.addColumn("Total");
        modelo.addColumn("Id Cliente");
        modelo.addColumn("Id Empleado");

        jTable_Factura.setModel(modelo);

        String query = "SELECT f.id_factura, f.fecha_emision, f.subtotal, f.impuesto, f.total, f.id_cliente, f.id_empleado FROM factura f";

        try ( Connection cn = con.Conectar();  Statement st = cn.createStatement();  ResultSet rs = st.executeQuery(query)) {
            while (rs.next()) {
                String[] data = new String[7];
                data[0] = rs.getString(1);
                data[1] = rs.getString(2);
                data[2] = rs.getString(3);
                data[3] = rs.getString(4);
                data[4] = rs.getString(5);
                data[5] = rs.getString(6);
                data[6] = rs.getString(7);
                modelo.addRow(data);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al mostrar datos");
        }
    }

    private void mostrardatos(int id) {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Medicamento");
        modelo.addColumn("Subtotal");
        modelo.addColumn("Cantidad");
        modelo.addColumn("Precio");
        modelo.addColumn("Nombre del Producto");
        modelo.addColumn("ID Factura");

        jTable_Medi.setModel(modelo);

        String query = "SELECT d.id_detalle_medicamento, d.subtotal,d.cantidad,d.precio_unitario,m.nombre,d.id_factura FROM detalle_factura_medicamento d INNER JOIN medicamentos m ON d.id_medicamento = m.id_medicamento WHERE d.id_factura = ?";

        try ( Connection cn = con.Conectar();  PreparedStatement ps = cn.prepareStatement(query)) {
            ps.setInt(1, id);
            try ( ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    String[] data = new String[6];
                    data[0] = rs.getString(1);
                    data[1] = rs.getString(2);
                    data[2] = rs.getString(3);
                    data[3] = rs.getString(4);
                    data[4] = rs.getString(5);
                    data[5] = rs.getString(6);
                    modelo.addRow(data);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al mostrar datos");
        }
    }

    private void mostrardatosConsulta(int id) {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Consulta");
        modelo.addColumn("Precio Consulta");
        modelo.addColumn("Diagnostico");
        modelo.addColumn("Fecha Consulta");
        modelo.addColumn("Nombre Mascota");
        modelo.addColumn("ID Factura");

        jTable_cons.setModel(modelo);

        String query = "SELECT d.id_detalle_consulta, d.precio_consulta, d.diagnostico, d.fecha_consulta, d.nombre_mascota, d.id_factura FROM detalle_factura_consulta d WHERE d.id_factura = ?";

        try ( Connection cn = con.Conectar();  PreparedStatement ps = cn.prepareStatement(query)) {
            ps.setInt(1, id);
            try ( ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    String[] data = new String[6];
                    data[0] = rs.getString(1);
                    data[1] = rs.getString(2);
                    data[2] = rs.getString(3);
                    data[3] = rs.getString(4);
                    data[4] = rs.getString(5);
                    data[5] = rs.getString(6);
                    modelo.addRow(data);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al mostrar datos");
        }
    }

    public JPanel getPanelHistorial_Factura() {
        return jPanel2;
    }

    private void agregarListenerFecha() {
        jdcfiltro_fecha.getDateEditor().addPropertyChangeListener(evt -> {
            if ("date".equals(evt.getPropertyName())) {
                filtrarPorFecha();
            }
        });
    }

    private void filtrarPorFecha() {
        java.util.Date fechaSeleccionada = jdcfiltro_fecha.getDate();
        if (fechaSeleccionada == null) {
            mostrardatos(); // Si no hay fecha, muestra todo
            return;
        }
        mostrardatos(WIDTH);
        mostrardatosConsulta(WIDTH);
        java.sql.Date fechaSQL = new java.sql.Date(fechaSeleccionada.getTime());

        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Factura");
        modelo.addColumn("Fecha Emision");
        modelo.addColumn("SubTotal");
        modelo.addColumn("Impuesto");
        modelo.addColumn("Total");
        modelo.addColumn("Id Cliente");
        modelo.addColumn("Id Empleado");
        jTable_Factura.setModel(modelo);

        String query = "SELECT f.id_factura, f.fecha_emision, f.subtotal, f.impuesto, f.total, f.id_cliente, f.id_empleado "
                + "FROM factura f WHERE DATE(f.fecha_emision) = ?";

        try ( Connection cn = con.Conectar();  PreparedStatement ps = cn.prepareStatement(query)) {
            ps.setDate(1, fechaSQL);
            try ( ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    String[] data = new String[7];
                    for (int i = 0; i < 7; i++) {
                        data[i] = rs.getString(i + 1);
                    }
                    modelo.addRow(data);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al filtrar por fecha");
        }
    }
}
